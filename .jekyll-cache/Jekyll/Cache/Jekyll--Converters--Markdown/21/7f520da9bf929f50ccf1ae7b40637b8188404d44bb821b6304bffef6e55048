I"Ð<p>CSS animation methods are quite basic, but they are really intuitive to use and can be combined to create really nice graphics. As a challenge I made an animation to show why day lengths change so much throughout the year when close the earthâ€™s poles.</p>

<p><a href="https://www.justinbailey.net/projects/earth-animation">See the animation here</a>.</p>

<p><strong>Constructing it</strong></p>

<p>This graphic uses several nested <code class="language-plaintext highlighter-rouge">div</code> elements. The Earth and all its nested elements have their own container <code class="language-plaintext highlighter-rouge">div</code> which allows animations to be applied:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &lt;div id ="earth-container"&gt;
	&lt;div class="ball" id="earth"&gt;
          &lt;div class="triangle" id="pointer"&gt;&lt;/div&gt;
          &lt;div class="small-line" id="small-line1"&gt;&lt;/div&gt;
          &lt;div class="small-line" id = "small-line2"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div id ="axis-line"&gt;&lt;/div&gt;
  &lt;/div&gt;
</code></pre></div></div>

<p>The entire graphic including the animated Earth and the Sun is then nested inside another container so it can be moved as a block.</p>

<p>Using the standard trick of setting <code class="language-plaintext highlighter-rouge">border-radius</code> to 50% creates our circular <code class="language-plaintext highlighter-rouge">earth</code> element. Inside this are two <code class="language-plaintext highlighter-rouge">small-line</code> elements which are pushed to the edges of their container to represent the Earthâ€™s polar regions. Setting overflow on <code class="language-plaintext highlighter-rouge">earth</code> to <code class="language-plaintext highlighter-rouge">hidden</code> trims so they fit inside our container.</p>

<p>We can then add the <code class="language-plaintext highlighter-rouge">pointer</code> element will be used to indicate the rotation of the Earth. The triangle shape is created using another trick: creating a shape with no zero height and zero width, setting borders, and making all but one side transparent to leave a little wedge:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.triangle{
  position: relative;
  width: 0;
  height: 0;
  border-top: 1em solid transparent;
  border-bottom: 1em solid transparent;
  border-left: 1em solid red;
  }
</code></pre></div></div>

<p>Finally, the <code class="language-plaintext highlighter-rouge">axis-line</code> element is added outside the <code class="language-plaintext highlighter-rouge">earth</code> element because we donâ€™t want it to be trimmed like the <code class="language-plaintext highlighter-rouge">small-line</code> elements.</p>

<p><strong>Animation</strong></p>

<p>The animation <code class="language-plaintext highlighter-rouge">around</code> is applied just to the <code class="language-plaintext highlighter-rouge">pointer</code> element. Itâ€™s actually a combination of several CSS property manipulations, including <code class="language-plaintext highlighter-rouge">opacity</code> <code class="language-plaintext highlighter-rouge">transform: scaleX()</code> and the <code class="language-plaintext highlighter-rouge">left</code> position attribute. The <code class="language-plaintext highlighter-rouge">transform</code> property is used to flip the direction of the pointer, and <code class="language-plaintext highlighter-rouge">opacity</code> helps to create the illusion that itâ€™s passing behind something. I was suprised how effectively this creates the illusion of 3D movement; the pointer really looks like itâ€™s whizzing round and round a globe! Although the animation itself is really simple these layered effects make it much subtler; CSSâ€™s default ease in/out animation style also helps to make this look good.</p>

<p>The <code class="language-plaintext highlighter-rouge">angle</code> animstion is applied to <code class="language-plaintext highlighter-rouge">earth</code> (and all its contents) and the <code class="language-plaintext highlighter-rouge">axis-line</code> element. To lock these together, both are placed inside an <code class="language-plaintext highlighter-rouge">earth-container</code> element, which takes the <code class="language-plaintext highlighter-rouge">angle</code> animation.</p>

<p>Iâ€™m pretty pleased with this; the performance of the animation is surprisingly good considering the use of nested animations. There was no need on this occasion to synchronise the two separate animations, but it would be fun to follow this up with a project which involves injecting some javascript to control sequencing and timing.</p>
:ET